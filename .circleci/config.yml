jobs:
  test-3.8-production:
    docker:
    - {image: python:3.8}
    environment: {COLUMNS: '160', COVER_PACKAGES: 'geometry,geometry.manifolds.tests.matrix_groups_tests,geometry.spheres,geometry.procrustes,geometry.manifolds.matrix_lie_group,geometry.unittests.random_geometry_tests,geometry.tex,geometry.manifolds.tests.pickling_tests,geometry.subspaces,geometry.unittests.uniform_dist_pvalue_paranoia,geometry.manifolds.manifold_embedding_propagation,geometry.manifolds.special_euclidean_algebra,geometry.manifolds.torus01,geometry.manifolds.tests.sphere_tests,geometry.types,geometry.manifolds.todo.orthogonal_group,geometry.mds_algos,geometry.manifolds.torus,geometry.manifolds.exceptions,geometry.manifolds.todo,geometry.unittests.utils_test,geometry.manifolds.tests.embedding_test,geometry.manifolds.matrix_lie_algebra,geometry,geometry.unittests.random_geometry_density_tests,geometry.manifolds.special_orthogonal_algebra,geometry.unittests.misc_tests,geometry.manifolds.todo.moebius,geometry.utils,geometry.manifolds.special_orthogonal_group,geometry.manifolds.matrix_lie_group_tangent,geometry.manifolds.special_euclidean_group,geometry.manifolds,geometry.manifolds.sphere,geometry.manifolds.translation_algebra,geometry.manifolds.tests,geometry.unittests.quaternions_test,geometry.distances,geometry.manifolds.tests.manifold_tests,geometry.manifolds.translation_group,geometry.unittests.procrustes_test,geometry.utils.numpy_backport,geometry.manifolds.matrix_linear_space,geometry.manifolds.tangent_bundle,geometry.manifolds.point_set,geometry.manifolds.todo.grassman,geometry.constants,geometry.distances.spherical,geometry.unittests.utils,geometry.rotations,geometry.poses,geometry.manifolds.differentiable_manifold,geometry.manifolds.square,geometry.subspaces.subspaces,geometry.formatting,geometry.unittests,geometry.basic_utils,geometry.manifolds.group,geometry.spheres_embedding,geometry.manifolds.embedding_relations,geometry.unittests.poses_test,geometry.poses_embedding,geometry.rotations_embedding,geometry.unittests.mds_test,geometry.manifolds.manifold_relations,geometry.manifolds.todo.stiefel,geometry.unittests.spheres_tests,geometry.manifolds.euclidean,geometry.manifolds.tests.checks_generation,geometry.unittests.rotations_tests,geometry.manifolds.product_manifold,geometry.unittests.distances_test,geometry.manifolds.todo.posdef_matrices,geometry.yaml_,geometry.distances.generic',
      PATH: /root/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,
      TEST_PACKAGES: geometry}
    steps:
    - checkout
    - run: {command: "mkdir -p  build-stats\nenv | tee  build-stats/env.txt\n", name: Build
          stats (1)}
    - store_artifacts: {destination: build-stats, path: build-stats}
    - run: {command: "pip3 install -U pip\npip3 install pipdeptree coverage shyaml\n\
          \nshyaml get-values install_requires < project.pp1.yaml > .requirements.txt\n\
          pip3 install  -r .requirements.txt\nrm .requirements.txt\n", name: Install
          deps}
    - run: {command: "shyaml get-values tests_require < project.pp1.yaml > .requirements_tests.txt\n\
          pip3 install -r .requirements_tests.txt\nrm .requirements_tests.txt\n\n\
          pip install \t\tpipdeptree==0.13.2\t\tbump2version\t\tnose==1.3.7\t\tnose2==0.10\t\
          \tnose2-html-report==0.6.0\t\tnose-parallel==0.4.0\t\tnose_xunitmp==0.4.1\t\
          \tpre-commit==2.11.1\t\trednose==1.3.0\t\tcoverage\tsphinx\t\tsphinx-rtd-theme\n",
        name: Install testing deps}
    - run: {command: "echo TERM = $TERM\n\npipdeptree | tee  build-stats/pipdeptree.txt\n\
          pip list   | tee  build-stats/pip-list.txt\npip freeze | tee  build-stats/pip-freeze.txt\n",
        name: Build stats (2)}
    - store_artifacts: {destination: build-stats, path: build-stats}
    - run: {command: "python setup.py develop --prefix ~/.local --no-deps\n", name: setup.py
          develop}
    - run: {command: "FILE=src/conf.py\nmkdir -p out/docs\nif test -f \"$FILE\"; then\n\
          \    sphinx-build src out/docs\nfi\n", name: Make docs}
    - store_artifacts: {destination: docs, path: out/docs, when: always}
    - run: {command: "mkdir -p out/test-results\nxunit_output=out/test-results/nose-${CIRCLE_NODE_INDEX}-xunit.xml\n\
          \n#              --processes=8 --process-timeout=1000 --process-restartworker\
          \ \\\n# --cover-packages=${COVER_PACKAGES} \\\nnosetests \\\n  --rednose\
          \ --immediate \\\n  --cover-tests --with-coverage \\\n  --with-xunitmp --xunitmp-file=${xunit_output}\
          \ \\\n  --cover-packages=${COVER_PACKAGES} \\\n  ${TEST_PACKAGES}\n", name: Run
          tests}
    - store_test_results: {path: out/test-results, when: always}
    - run: {command: "coverage combine\ncoverage html -d out/coverage\ncoverage xml\n",
        name: Coverage report, when: always}
    - store_artifacts: {destination: coverage, path: out/coverage, when: always}
    - store_artifacts: {destination: tests, path: out/tests, when: always}
    - run: {command: "bash <(curl -s https://codecov.io/bash)\n", name: CodeCov, when: always}
    working_directory: ~/repo
  test-3.8-staging:
    docker:
    - {image: python:3.8}
    environment: {COLUMNS: '160', COVER_PACKAGES: 'geometry,geometry.manifolds.tests.matrix_groups_tests,geometry.spheres,geometry.procrustes,geometry.manifolds.matrix_lie_group,geometry.unittests.random_geometry_tests,geometry.tex,geometry.manifolds.tests.pickling_tests,geometry.subspaces,geometry.unittests.uniform_dist_pvalue_paranoia,geometry.manifolds.manifold_embedding_propagation,geometry.manifolds.special_euclidean_algebra,geometry.manifolds.torus01,geometry.manifolds.tests.sphere_tests,geometry.types,geometry.manifolds.todo.orthogonal_group,geometry.mds_algos,geometry.manifolds.torus,geometry.manifolds.exceptions,geometry.manifolds.todo,geometry.unittests.utils_test,geometry.manifolds.tests.embedding_test,geometry.manifolds.matrix_lie_algebra,geometry,geometry.unittests.random_geometry_density_tests,geometry.manifolds.special_orthogonal_algebra,geometry.unittests.misc_tests,geometry.manifolds.todo.moebius,geometry.utils,geometry.manifolds.special_orthogonal_group,geometry.manifolds.matrix_lie_group_tangent,geometry.manifolds.special_euclidean_group,geometry.manifolds,geometry.manifolds.sphere,geometry.manifolds.translation_algebra,geometry.manifolds.tests,geometry.unittests.quaternions_test,geometry.distances,geometry.manifolds.tests.manifold_tests,geometry.manifolds.translation_group,geometry.unittests.procrustes_test,geometry.utils.numpy_backport,geometry.manifolds.matrix_linear_space,geometry.manifolds.tangent_bundle,geometry.manifolds.point_set,geometry.manifolds.todo.grassman,geometry.constants,geometry.distances.spherical,geometry.unittests.utils,geometry.rotations,geometry.poses,geometry.manifolds.differentiable_manifold,geometry.manifolds.square,geometry.subspaces.subspaces,geometry.formatting,geometry.unittests,geometry.basic_utils,geometry.manifolds.group,geometry.spheres_embedding,geometry.manifolds.embedding_relations,geometry.unittests.poses_test,geometry.poses_embedding,geometry.rotations_embedding,geometry.unittests.mds_test,geometry.manifolds.manifold_relations,geometry.manifolds.todo.stiefel,geometry.unittests.spheres_tests,geometry.manifolds.euclidean,geometry.manifolds.tests.checks_generation,geometry.unittests.rotations_tests,geometry.manifolds.product_manifold,geometry.unittests.distances_test,geometry.manifolds.todo.posdef_matrices,geometry.yaml_,geometry.distances.generic',
      PATH: /root/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,
      TEST_PACKAGES: geometry}
    steps:
    - checkout
    - run: {command: "mkdir -p  build-stats\nenv | tee  build-stats/env.txt\n", name: Build
          stats (1)}
    - store_artifacts: {destination: build-stats, path: build-stats}
    - run: {command: "pip3 install -U pip\npip3 install pipdeptree coverage shyaml\n\
          \nshyaml get-values install_requires < project.pp1.yaml > .requirements.txt\n\
          pip3 install  -r .requirements.txt\nrm .requirements.txt\n", name: Install
          deps}
    - run: {command: "shyaml get-values tests_require < project.pp1.yaml > .requirements_tests.txt\n\
          pip3 install -r .requirements_tests.txt\nrm .requirements_tests.txt\n\n\
          pip install \t\tpipdeptree==0.13.2\t\tbump2version\t\tnose==1.3.7\t\tnose2==0.10\t\
          \tnose2-html-report==0.6.0\t\tnose-parallel==0.4.0\t\tnose_xunitmp==0.4.1\t\
          \tpre-commit==2.11.1\t\trednose==1.3.0\t\tcoverage\tsphinx\t\tsphinx-rtd-theme\n",
        name: Install testing deps}
    - run: {command: "echo TERM = $TERM\n\npipdeptree | tee  build-stats/pipdeptree.txt\n\
          pip list   | tee  build-stats/pip-list.txt\npip freeze | tee  build-stats/pip-freeze.txt\n",
        name: Build stats (2)}
    - store_artifacts: {destination: build-stats, path: build-stats}
    - run: {command: "python setup.py develop --prefix ~/.local --no-deps\n", name: setup.py
          develop}
    - run: {command: "FILE=src/conf.py\nmkdir -p out/docs\nif test -f \"$FILE\"; then\n\
          \    sphinx-build src out/docs\nfi\n", name: Make docs}
    - store_artifacts: {destination: docs, path: out/docs, when: always}
    - run: {command: "mkdir -p out/test-results\nxunit_output=out/test-results/nose-${CIRCLE_NODE_INDEX}-xunit.xml\n\
          \n#              --processes=8 --process-timeout=1000 --process-restartworker\
          \ \\\n# --cover-packages=${COVER_PACKAGES} \\\nnosetests \\\n  --rednose\
          \ --immediate \\\n  --cover-tests --with-coverage \\\n  --with-xunitmp --xunitmp-file=${xunit_output}\
          \ \\\n  --cover-packages=${COVER_PACKAGES} \\\n  ${TEST_PACKAGES}\n", name: Run
          tests}
    - store_test_results: {path: out/test-results, when: always}
    - run: {command: "coverage combine\ncoverage html -d out/coverage\ncoverage xml\n",
        name: Coverage report, when: always}
    - store_artifacts: {destination: coverage, path: out/coverage, when: always}
    - store_artifacts: {destination: tests, path: out/tests, when: always}
    - run: {command: "bash <(curl -s https://codecov.io/bash)\n", name: CodeCov, when: always}
    working_directory: ~/repo
version: 2
workflows:
  test:
    jobs:
    - test-3.8-staging:
        context: pip-staging
        filters:
          branches: {only: /z7-stage.*/}
    - test-3.8-production:
        context: z7-production
        filters:
          branches: {ignore: /z7-stage.*/}
  version: 2

# sigil 5c50cf64042b500e36a640d094fdc7a6
